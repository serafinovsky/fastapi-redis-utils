[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "fastapi-redis-utils"
dynamic = ["version"]
description = "Fast and easy Redis integration for FastAPI applications."
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Mark Serafinovsky", email = "m.serafinovsky@gmail.com"},
]
keywords = ["fastapi", "redis", "async", "connection-pool", "dependency-injection", "utils"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Database",
    "Framework :: FastAPI",
    "Typing :: Typed",
]
requires-python = ">=3.11"
dependencies = [
    "redis>=6.2.0",
    "pydantic>=2.11.7",
]

[dependency-groups]
dev = [
    "hatch>=1.14.1",
    "twine>=6.1.0",
    "mypy>=1.17.1",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "uvicorn>=0.35.0",
    "fastapi>=0.116.1",
    "ruff>=0.12.7",
    "bandit>=1.8.6"
]

[project.urls]
Homepage = "https://github.com/serafinovsky/fastapi-redis-utils"
Documentation = "https://github.com/serafinovsky/fastapi-redis-utils#readme"
Repository = "https://github.com/serafinovsky/fastapi-redis-utils"
Issues = "https://github.com/serafinovsky/fastapi-redis-utils/issues"

[project.scripts]

[tool.hatch.version]
path = "fastapi_redis_utils/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["fastapi_redis_utils"]

[tool.ruff]
target-version = "py311"
line-length = 120
respect-gitignore = true

[tool.ruff.lint]
select = [
    "E",        # pycodestyle errors
    "W",        # pycodestyle warnings
    "F",        # pyflakes
    "I",        # isort
    "B",        # flake8-bugbear
    "C4",       # flake8-comprehensions
    "UP",       # pyupgrade
    "FAST",     # fastapi specific rules
    "ASYNC",    # async/await rules
    "S",        # security rules
    "LOG",      # logging best practices
    "Q",        # quotes standardization
    "SLF",      # private member access
    "SIM",      # code simplification
    "TC",       # type checking
    "ARG",      # unused arguments
    "PTH",      # pathlib best practices
    "N",        # naming conventions
    "T20"       # print statement usage

]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "SLF001", "SIM117", "ARG001"]
"examples/*" = ["ARG001", "S104"]


[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"
multiline-quotes = "double"
docstring-quotes = "double"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true


[[tool.mypy.overrides]]
module = [
    "tests.*",
]
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false

[[tool.mypy.overrides]]
module = [
    "examples.*",
]
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=fastapi_redis_utils",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
asyncio_mode = "auto"

[tool.coverage.run]
relative_files = true
source = ["fastapi_redis_utils"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "logger.*",
    "if TYPE_CHECKING:"
]